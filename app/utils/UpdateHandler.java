package utils;

import java.util.concurrent.CompletionStage;

import com.fasterxml.jackson.databind.node.ObjectNode;

import models.Client;
import models.Message;
import models.Reply;
import models.Update;
import models.User;
import models.dao.UpdateDAO;
import models.dao.UserDAO;
import play.db.jpa.JPAApi;
import play.libs.Json;
import play.libs.ws.WSClient;
import play.libs.ws.WSRequest;
import play.libs.ws.WSResponse;

public class UpdateHandler {
	private WSClient ws;
	private UpdateDAO updateDao;
	private UserDAO userDao;
	
	//SuperClientBot
	private static final String urlForNotification = "https://api.telegram.org/bot283733008:AAGYER7EsbD0ESpkJ3tsaBJgvAet6sg8UiI/sendMessage";
	//chat id of admins
	private static final long adminChatId = 308064562;
	private static final long salimChatId = 98166212;
	
	//KnigaOtzyvovBot
	private static final String url = "https://api.telegram.org/bot283960461:AAFkG67m6NWfHpPQ3vQN1KVKhu1buMh9m6M/sendMessage";
	
	private static final String[] questions = new String[5];
	
	public UpdateHandler(WSClient ws, JPAApi jpaApi) {
		this.ws = ws;
		this.updateDao = new UpdateDAO(jpaApi);
		this.userDao = new UserDAO(jpaApi);

		questions[0] = "–û—Ç–∑—ã–≤ –æ –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏)?";
		questions[1] = "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –∑–∞–≤–µ–¥–µ–Ω–∏—è (–≥–æ—Ä–æ–¥, —É–ª–∏—Ü—É)";
		questions[2] = "–ù–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–∞—à –æ—Ç–∑—ã–≤ –æ –¥–∞–Ω–Ω–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ üëç üëé";
		questions[3] = "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞—Å–∫–æ–ª—å–∫–æ –≤–µ—Ä–æ—è—Ç–Ω–æ, —á—Ç–æ –í—ã –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –¥–∞–Ω–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é –¥—Ä—É–≥—É –∏–ª–∏ –∫–æ–ª–ª–µ–≥–µ? (–û—Ç 0 –¥–æ 10 –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ü–µ–Ω–æ–∫) üòâ";
		questions[4] = "–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –æ—Ç–∑—ã–≤ –∏ –æ—Ü–µ–Ω–∫—É!üëåüëç";
	}
	
	
	public void handleUpdate(Update update) {
		long chatId = update.getMessage().getChat().getId();
		long msgTime = update.getMessage().getDate();
		Reply reply = updateDao.getLastUnfinishedReply(chatId);
		
		//–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç, —Ç–æ –ø–æ—è—Å–Ω—è–µ–º –∫—Ç–æ –º—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞ –≤ –±–∞–∑—É +–æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
		if(!userDao.isUserExist(chatId)) {
			String firstQuestion = "–ü—Ä–∏–≤–µ—Ç! –Ø —Ä–æ–±–æ—Ç, —Å–æ–±–∏—Ä–∞—é—â–∏–π –æ—Ç–∑—ã–≤—ã –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö. –î–µ–ª–∞—é –ö–ª–∏–µ–Ω—Ç–æ–≤ –∏ –∫–æ–º–ø–∞–Ω–∏–∏ –±–ª–∏–∂–µ –¥—Ä—É–≥ –∫ –¥—Ä—É–≥—É.üòÄ"
					+ "\n–û—Ç–∑—ã–≤ –æ –∫–∞–∫–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å (–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏)?";
			saveUser(update.getMessage());
			sendNotifAboutNewUser(adminChatId, "New user was created: " + update.getMessage().getFrom().getFirst_name());
			sendNotifAboutNewUser(salimChatId, "New user was created: " + update.getMessage().getFrom().getFirst_name());
			
			initReply(chatId, msgTime);
			sendMessage(chatId, firstQuestion);
		} else if(reply == null) { //–µ—Å–ª–∏ –¥–æ —ç—Ç–æ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ –∑–∞–¥–∞–≤–∞–ª–æ—Å—å
			initReply(chatId, msgTime);
			sendMessage(chatId, questions[0]);
		} else if(msgTime - reply.getMsgTime() > 3600L) { //–µ—Å–ª–∏ –ø—Ä–æ—à–ª–æ –±–æ–ª–µ–µ —á–∞—Å–∞
			reply.setFinished(true);
			updateDao.saveReply(reply);
			
			initReply(chatId, msgTime);
			sendMessage(chatId, questions[0]);
		} else if(update.getMessage().getText() == "/start") { //–µ—Å–ª–∏ —Ö–æ—á–µ—Ç –∑–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å—Ç–∏—Ç—å –æ—Ç–∑—ã–≤
			reply.setFinished(true);
			updateDao.saveReply(reply);
			
			initReply(chatId, msgTime);
			sendMessage(chatId, questions[0]);
		} else {
			handleCheckedUpdate(update, reply);
		}
	}

	
	
	
	public void handleCheckedUpdate(Update u, Reply reply) {
		long chatId = u.getMessage().getChat().getId();
		long msgTime = u.getMessage().getDate();
		String msgTxt = u.getMessage().getText();
		int counter = reply.getQuestionCount();
			
		//–µ—Å–ª–∏ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç–∏–∫–µ—Ä –∏–ª–∏ –¥—Ä—É–≥–æ–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
		if((msgTxt == null || msgTxt.trim().isEmpty()) && reply.getQuestionCount() != 1) {
			resendMsg(chatId, reply, msgTime, questions[counter]);
		} else {
			//set time and counter
			reply.setMsgTime(msgTime);
			reply.setQuestionCount(counter + 1);
			
			//set data to entity
			if(counter == 0) {
				reply.setCompany(msgTxt);
				ObjectNode kBoard = getKeyboards();
				
				
				//save entity
				updateDao.saveReply(reply);
				postMessage(chatId, questions[1], kBoard);
				return;
			} else if(counter == 1) {
				reply.setCity(msgTxt);
			} else if(counter == 2) {
				reply.setFirstReply(msgTxt);
				
				processMedia();
			} else if(counter == 3) {
				Integer rating = null;
				try {
					rating = Integer.valueOf(msgTxt);
					if (rating > 10 || rating < 0) {
						resendMsg(chatId, reply, msgTime, "–§–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 10. ");
						return;
					}
					
				} catch (NumberFormatException e) {
					resendMsg(chatId, reply, msgTime, "–§–æ—Ä–º–∞—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ—Å—Ç–∞–≤—å—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 0 –¥–æ 10.");
					return;
				}
				reply.setRating(rating);
				
				
			}
			//save entity
			updateDao.saveReply(reply);
			//send responce
//			sendMessage(chatId, questions[counter + 1]);
			postMessage(chatId, questions[counter + 1], null);
		}
	}

	private void initReply(long chatId, long firstMsgTime) {
		Reply r = new Reply();
		r.setChatId(chatId);
		r.setQuestionCount(0); //first asked question
		r.setMsgTime(firstMsgTime);
		r.setFinished(false);
		updateDao.saveReply(r);
		
		sendMessage(chatId, questions[0]);
	}

	public void sendMessage(long chat_id, String text) {
		WSRequest request = ws.url(url);
		request.setQueryParameter("chat_id", String.valueOf(chat_id));
		request.setQueryParameter("text", text);
		CompletionStage<WSResponse> rs = request.get();
		
	}
	
	public void resendMsg(long chatId, Reply reply, long msgTime, String msgTxt) {
		sendMessage(chatId, msgTxt);
		reply.setMsgTime(msgTime);
		updateDao.saveReply(reply);
	}
	
	

	private void saveUser(Message message) {
		User user = message.getFrom();
		long chatId = message.getChat().getId();
		
		Client client = new Client();
		client.setFirstName(user.getFirst_name());
		client.setLastName(user.getLast_name());
		client.setUsername(user.getUsername());
		client.setChatId(chatId);
		userDao.save(client);
	}
	
	private void sendNotifAboutNewUser(long chat_id, String text) {
		WSRequest request = ws.url(urlForNotification);
		request.setQueryParameter("chat_id", String.valueOf(chat_id));
		request.setQueryParameter("text", text);
		CompletionStage<WSResponse> rs = request.get();
		
	}
	
	private void processMedia() {
		
	}
	
	private void postMessage(long chat_id, String text, ObjectNode reply_markup) {
		WSRequest request = ws.url(url);
		ObjectNode postObj = Json.newObject();
		postObj.put("chat_id", String.valueOf(chat_id));
		postObj.put("text", text);
		if(reply_markup != null)
			postObj.put("reply_markup", reply_markup);
		
		CompletionStage<WSResponse> rs = request.post(postObj);
	}

	private ObjectNode getKeyboards() {
		ObjectNode btn = Json.newObject().put("request_location", true).put("text", "–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ");
		ObjectNode reply_markup = Json.newObject();
		reply_markup.put("keyboard", Json.newArray().add(Json.newArray().add(btn)));
		return reply_markup;
	}

}
